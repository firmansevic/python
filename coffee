{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9046052,"sourceType":"datasetVersion","datasetId":5328600}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"raw","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\ndf=pd.read_csv('/kaggle/input/coffee-sales/index.csv')\ndf.head(3)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T04:30:59.028863Z","iopub.execute_input":"2024-07-28T04:30:59.029300Z","iopub.status.idle":"2024-07-28T04:30:59.079062Z","shell.execute_reply.started":"2024-07-28T04:30:59.029265Z","shell.execute_reply":"2024-07-28T04:30:59.077822Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"         date                 datetime cash_type                 card  money  \\\n0  2024-03-01  2024-03-01 10:15:50.520      card  ANON-0000-0000-0001   38.7   \n1  2024-03-01  2024-03-01 12:19:22.539      card  ANON-0000-0000-0002   38.7   \n2  2024-03-01  2024-03-01 12:20:18.089      card  ANON-0000-0000-0002   38.7   \n\n     coffee_name  \n0          Latte  \n1  Hot Chocolate  \n2  Hot Chocolate  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>datetime</th>\n      <th>cash_type</th>\n      <th>card</th>\n      <th>money</th>\n      <th>coffee_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2024-03-01</td>\n      <td>2024-03-01 10:15:50.520</td>\n      <td>card</td>\n      <td>ANON-0000-0000-0001</td>\n      <td>38.7</td>\n      <td>Latte</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2024-03-01</td>\n      <td>2024-03-01 12:19:22.539</td>\n      <td>card</td>\n      <td>ANON-0000-0000-0002</td>\n      <td>38.7</td>\n      <td>Hot Chocolate</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2024-03-01</td>\n      <td>2024-03-01 12:20:18.089</td>\n      <td>card</td>\n      <td>ANON-0000-0000-0002</td>\n      <td>38.7</td>\n      <td>Hot Chocolate</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df","metadata":{},"execution_count":null,"outputs":[]}]}